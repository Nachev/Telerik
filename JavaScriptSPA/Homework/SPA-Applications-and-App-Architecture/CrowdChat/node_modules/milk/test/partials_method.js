// Generated by CoffeeScript 1.7.1
(function() {
  var Milk, assert, suite, vows;

  vows = require('vows');

  assert = require('assert');

  Milk = require('milk');

  suite = vows.describe('Milk.escape');

  suite.addBatch({
    "Supplying a #partials method": {
      topic: function() {
        this.partials = Milk.partials;
        Milk.partials = function(str) {
          return str.split('').reverse().join('');
        };
        return function() {
          return Milk.render.apply(Milk, arguments);
        };
      },
      teardown: function() {
        return Milk.partials = this.partials;
      },
      'provides a new default Partial resolution mechanism': function(render) {
        var data, tmpl;
        tmpl = '[{{>partial_name}}]';
        data = {};
        return assert.equal(render(tmpl, data), '[eman_laitrap]');
      },
      'can be overridden by supplying a partial hash to #render': function(render) {
        var data, partials, render_missing_partial, tmpl;
        tmpl = '[{{>partial_name}}]';
        data = {};
        partials = {
          partial_name: 'from hash'
        };
        assert.equal(render(tmpl, data, partials), '[from hash]');
        render_missing_partial = function() {
          return render('{{>miss}}', data, partials);
        };
        return assert.throws(render_missing_partial, /^Unknown partial 'miss'!$/);
      }
    }
  });

  suite["export"](module);

}).call(this);

//# sourceMappingURL=partials_method.map
