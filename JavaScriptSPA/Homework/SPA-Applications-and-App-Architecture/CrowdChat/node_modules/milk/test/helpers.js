// Generated by CoffeeScript 1.7.1
(function() {
  var Milk, assert, suite, vows;

  vows = require('vows');

  assert = require('assert');

  Milk = require('milk');

  suite = vows.describe('Milk.helpers');

  suite.addBatch({
    "Providing an object to Milk.helpers": {
      topic: function() {
        Milk.helpers = {
          key: 'helper',
          helper: 'helper'
        };
        return function() {
          return Milk.render.apply(Milk, arguments);
        };
      },
      teardown: function() {
        return Milk.helpers = [];
      },
      'should put the object on the context stack': function(render) {
        var result;
        result = render('[{{helper}}, {{data}}]', {
          data: 'data'
        });
        return assert.equal(result, '[helper, data]');
      },
      'should put the object at the bottom of the context stack': function(render) {
        var result;
        result = render('[{{helper}}, {{key}}]', {
          key: 'data'
        });
        return assert.equal(result, '[helper, data]');
      }
    }
  });

  suite.addBatch({
    "Providing an array to Milk.helpers": {
      topic: function() {
        Milk.helpers = [
          {
            key: 'helper',
            helper: 'helper'
          }, {
            helper: 'two'
          }
        ];
        return function() {
          return Milk.render.apply(Milk, arguments);
        };
      },
      teardown: function() {
        return Milk.helpers = [];
      },
      'should put each element on the context stack': function(render) {
        var result;
        result = render('[{{key}}, {{data}}]', {
          data: 'data'
        });
        return assert.equal(result, '[helper, data]');
      },
      'should put each element on the context stack in order': function(render) {
        var result;
        result = render('[{{key}}, {{helper}}]', {});
        return assert.equal(result, '[helper, two]');
      },
      'should put the elements at the bottom of the context stack': function(render) {
        var result;
        result = render('[{{helper}}, {{key}}]', {
          key: 'data'
        });
        return assert.equal(result, '[two, data]');
      }
    }
  });

  suite["export"](module);

}).call(this);

//# sourceMappingURL=helpers.map
