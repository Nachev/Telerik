// Generated by CoffeeScript 1.7.1
(function() {
  var Milk, assert, suite, vows;

  vows = require('vows');

  assert = require('assert');

  Milk = require('milk');

  suite = vows.describe('Object Methods');

  suite.addBatch({
    "Interpolating an object method": {
      topic: function() {
        return function(data) {
          return Milk.render('[{{method}}]', data);
        };
      },
      'calls the method': function(render) {
        var data;
        data = {
          method: function() {
            return 'a, b, c';
          }
        };
        return assert.equal(render(data), '[a, b, c]');
      },
      'binds `this` to the context': function(render) {
        var data;
        data = {
          method: (function() {
            return this.data;
          }),
          data: 'foo'
        };
        return assert.equal(render(data), '[foo]');
      },
      'renders the returned string': function(render) {
        var data;
        data = {
          method: (function() {
            return '{{data}}';
          }),
          data: 'bar'
        };
        return assert.equal(render(data), '[bar]');
      }
    },
    "Building a section with an object method": {
      topic: function() {
        return function(data) {
          return Milk.render('[{{#method}}{{x}}{{/method}}]', data);
        };
      },
      'uses the returned string as the section content': function(render) {
        var data;
        data = {
          method: (function() {
            return 'content';
          })
        };
        return assert.equal(render(data), '[content]');
      },
      'calls the method': function(render) {
        var data;
        data = {
          method: function() {
            return 'a, b, c';
          }
        };
        return assert.equal(render(data), '[a, b, c]');
      },
      'binds `this` to the context': function(render) {
        var data;
        data = {
          method: (function() {
            return this.data;
          }),
          data: 'foo'
        };
        return assert.equal(render(data), '[foo]');
      },
      'passes the raw template string as an argument': function(render) {
        return render({
          method: function(tmpl) {
            return assert.equal(tmpl, '{{x}}');
          }
        });
      },
      'renders the returned string': function(render) {
        var data;
        data = {
          method: (function() {
            return '{{data}}';
          }),
          data: 'bar'
        };
        return assert.equal(render(data), '[bar]');
      }
    },
    "Using an object method in a nested context": {
      topic: function() {
        return function(tmpl, data) {
          data = {
            nested: data,
            key: 'WRONG'
          };
          return Milk.render("[{{#nested}}" + tmpl + "{{/nested}}]", data);
        };
      },
      "for interpolation": {
        topic: function(T) {
          return function(data) {
            return T('{{method}}', data);
          };
        },
        'calls the method': function(render) {
          var data;
          data = {
            method: function() {
              return 'a, b, c';
            }
          };
          return assert.equal(render(data), '[a, b, c]');
        },
        'binds `this` to the context element': function(render) {
          var data;
          data = {
            method: (function() {
              return this.key;
            }),
            key: 'foo'
          };
          return assert.equal(render(data), '[foo]');
        },
        'renders the returned string': function(render) {
          var data;
          data = {
            method: (function() {
              return '{{data}}';
            }),
            data: 'bar'
          };
          return assert.equal(render(data), '[bar]');
        }
      },
      "for a section": {
        topic: function(T) {
          return function(data) {
            return T('{{#method}}{{x}}{{/method}}', data);
          };
        },
        'uses the returned string as the section content': function(render) {
          var data;
          data = {
            method: (function() {
              return 'content';
            })
          };
          return assert.equal(render(data), '[content]');
        },
        'calls the method': function(render) {
          var data;
          data = {
            method: function() {
              return 'a, b, c';
            }
          };
          return assert.equal(render(data), '[a, b, c]');
        },
        'binds `this` to the context element': function(render) {
          var data;
          data = {
            method: (function() {
              return this.key;
            }),
            key: 'foo'
          };
          return assert.equal(render(data), '[foo]');
        },
        'passes the raw template string as an argument': function(render) {
          return render({
            method: function(tmpl) {
              return assert.equal(tmpl, '{{x}}');
            }
          });
        },
        'renders the returned string': function(render) {
          var data;
          data = {
            method: (function() {
              return '{{data}}';
            }),
            data: 'bar'
          };
          return assert.equal(render(data), '[bar]');
        }
      }
    }
  });

  suite["export"](module);

}).call(this);

//# sourceMappingURL=object_methods.map
